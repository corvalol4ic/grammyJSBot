const { Bot, InlineKeyboard } = require("grammy");
const ccxt = require("ccxt");
const { setTimeout } = require("timers/promises");

// –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è
const CONFIG = {
  CHAT_ID: "-1002496172374",
  MESSAGE_DELAY: 3500,
  ANALYSIS_INTERVAL: 1 * 60 * 1000, // 10 –º–∏–Ω—É—Ç –≤ –º–∏–ª–ª–∏—Å–µ–∫—É–Ω–¥–∞—Ö
  // –ü–∞—Ä—ã –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞ (–º–æ–∂–Ω–æ –¥–æ–±–∞–≤–ª—è—Ç—å/—É–¥–∞–ª—è—Ç—å)
  TRADING_PAIRS: [
    "MNT/USDT",
    "ETH/USDT",
    "SOL/USDT",
    "XRP/USDT",
    "ADA/USDT",
    "DOGE/USDT",
    "PEPE/USDT",
    "SUI/USDT",
    "VIRTUAL/USDT",
    "APEX/USDT",
    "TRUMP/USDT",
    "ONDO/USDT",
    "GOAT/USDT",
    "LINK/USDT",
    "TRX/USDT",
    "TON/USDT",
    "SHIB/USDT",
    "AAVE/USDT",
    "POPCAT/USDT",
    "KAS/USDT",
    "CRV/USDT",
    "OP/USDT",
    "APT/USDT",
    "PYTH/USDT",
    
    "LTC/USDT"
  ],
  TIMEFRAMES: ["5m", "15m", "1h", "1d"],
  INDICATORS: {
    RSI: { period: 14, overbought: 70, oversold: 30 },
    MACD: { fastPeriod: 12, slowPeriod: 26, signalPeriod: 9 },
    EMA: { period: 20 },
    SMA: { period: 50 },
    BOLL: { period: 20, stdDev: 2 },
    ATR: { period: 14 }
  },
  TREND_THRESHOLDS: {
    STRONG_BULLISH: 60,
    BULLISH: 55,
    BEARISH: 40,
    STRONG_BEARISH: 30
  },
  PROFIT_PERCENT: {
    STRONG_BULLISH: 2,
    BULLISH: 1
  },
  EXIT_STRATEGY: {
    RISK_REWARD_RATIO: 2,
    ATR_MULTIPLIER: 1.5,
    TRAILING_STOP_PERCENT: 0.5
  },
  BYBIT_LINK: "https://www.bybit.com/ru-RU/trade/spot/",
  MEXC_LINK: "https://www.mexc.com/ru-RU/exchange/"
};

// –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –±–∏—Ä–∂–∏
const exchange = new ccxt.bybit({ enableRateLimit: true });

// –•—Ä–∞–Ω–∏–ª–∏—â–µ —Å–æ—Å—Ç–æ—è–Ω–∏–π –ø–∞—Ä
const pairStates = new Map();

// –§—É–Ω–∫—Ü–∏–∏ –∏–Ω–¥–∏–∫–∞—Ç–æ—Ä–æ–≤
const calculateSMA = (data, period) => {
  const sma = [];
  for (let i = period - 1; i < data.length; i++) {
    sma.push(data.slice(i - period + 1, i + 1).reduce((a, b) => a + b, 0) / period);
  }
  return sma;
};

const calculateEMA = (data, period) => {
  const ema = [];
  const k = 2 / (period + 1);
  ema[0] = data[0];
  for (let i = 1; i < data.length; i++) {
    ema[i] = data[i] * k + ema[i - 1] * (1 - k);
  }
  return ema;
};

const calculateRSI = (data, period) => {
  const gains = [], losses = [];
  for (let i = 1; i < data.length; i++) {
    const change = data[i] - data[i - 1];
    gains.push(change > 0 ? change : 0);
    losses.push(change < 0 ? -change : 0);
  }
  let avgGain = gains.slice(0, period).reduce((a, b) => a + b, 0) / period;
  let avgLoss = losses.slice(0, period).reduce((a, b) => a + b, 0) / period;
  const rsi = [100 - (100 / (1 + avgGain / Math.max(avgLoss, 0.000001)))];
  for (let i = period; i < gains.length; i++) {
    avgGain = (avgGain * (period - 1) + gains[i]) / period;
    avgLoss = (avgLoss * (period - 1) + losses[i]) / period;
    rsi.push(100 - (100 / (1 + avgGain / Math.max(avgLoss, 0.000001))));
  }
  return rsi;
};

const calculateMACD = (data, fastPeriod, slowPeriod, signalPeriod) => {
  const fastEMA = calculateEMA(data, fastPeriod);
  const slowEMA = calculateEMA(data, slowPeriod);
  const startIdx = slowEMA.length - fastEMA.length;
  const macdLine = fastEMA.map((val, i) => val - slowEMA[startIdx + i]);
  return {
    macd: macdLine.slice(-1)[0],
    signal: calculateEMA(macdLine, signalPeriod).slice(-1)[0],
    histogram: macdLine.slice(-1)[0] - calculateEMA(macdLine, signalPeriod).slice(-1)[0]
  };
};

const calculateBollingerBands = (data, period, stdDev) => {
  const sma = calculateSMA(data, period);
  const bands = [];
  for (let i = period - 1; i < data.length; i++) {
    const slice = data.slice(i - period + 1, i + 1);
    const mean = sma[i - period + 1];
    const std = Math.sqrt(slice.reduce((sum, val) => sum + Math.pow(val - mean, 2), 0) / period);
    bands.push({ upper: mean + stdDev * std, middle: mean, lower: mean - stdDev * std });
  }
  return bands.slice(-1)[0];
};

const calculateATR = (candles, period) => {
  const tr = [];
  for (let i = 1; i < candles.length; i++) {
    tr.push(Math.max(
      candles[i].high - candles[i].low,
      Math.abs(candles[i].high - candles[i-1].close),
      Math.abs(candles[i].low - candles[i-1].close)
    ));
  }
  let atr = [tr.slice(0, period).reduce((a, b) => a + b, 0) / period];
  for (let i = period; i < tr.length; i++) {
    atr.push((atr[atr.length-1] * (period-1) + tr[i]) / period);
  }
  return atr.slice(-1)[0];
};

// –†–∞–±–æ—Ç–∞ —Å –±–∏—Ä–∂–µ–π
const fetchOHLCV = async (symbol, timeframe, limit = 100) => {
  try {
    const ohlcv = await exchange.fetchOHLCV(symbol, timeframe, undefined, limit);
    return ohlcv.map(c => ({
      timestamp: c[0], open: c[1], high: c[2], 
      low: c[3], close: c[4], volume: c[5]
    }));
  } catch (error) {
    console.error(`Error fetching OHLCV for ${symbol}:`, error);
    return null;
  }
};

// –ê–Ω–∞–ª–∏–∑ –∏ —Ñ–æ—Ä–º–∏—Ä–æ–≤–∞–Ω–∏–µ —Å–æ–æ–±—â–µ–Ω–∏–π
const determineTrend = (analysis) => {
  let bullishCount = 0, bearishCount = 0, totalSignals = 0;
  
  for (const timeframe of CONFIG.TIMEFRAMES) {
    if (!analysis[timeframe]) continue;
    const { indicators, lastClose } = analysis[timeframe];
    
    // Bullish signals
    if (indicators.RSI < CONFIG.INDICATORS.RSI.oversold) bullishCount++;
    if (indicators.MACD.histogram > 0) bullishCount++;
    if (indicators.EMA > indicators.SMA) bullishCount++;
    if (lastClose < indicators.BOLL.lower) bullishCount++;
    
    // Bearish signals
    if (indicators.RSI > CONFIG.INDICATORS.RSI.overbought) bearishCount++;
    if (indicators.MACD.histogram < 0) bearishCount++;
    if (indicators.EMA < indicators.SMA) bearishCount++;
    if (lastClose > indicators.BOLL.upper) bearishCount++;
    
    totalSignals += 4;
  }
  
  const bullishPercentage = (bullishCount / totalSignals) * 100;
  const bearishPercentage = (bearishCount / totalSignals) * 100;
  
  if (bullishPercentage > CONFIG.TREND_THRESHOLDS.STRONG_BULLISH) {
    return { 
      trend: "üü¢ –°–∏–ª—å–Ω—ã–π –≤–æ—Å—Ö–æ–¥—è—â–∏–π —Ç—Ä–µ–Ω–¥", 
      percentage: bullishPercentage,
      state: "STRONG_BULLISH",
      profitPercent: CONFIG.PROFIT_PERCENT.STRONG_BULLISH
    };
  }
  if (bullishPercentage > CONFIG.TREND_THRESHOLDS.BULLISH) {
    return { 
      trend: "üü¢ –í–æ—Å—Ö–æ–¥—è—â–∏–π —Ç—Ä–µ–Ω–¥", 
      percentage: bullishPercentage,
      state: "BULLISH",
      profitPercent: CONFIG.PROFIT_PERCENT.BULLISH
    };
  }
  if (bearishPercentage > CONFIG.TREND_THRESHOLDS.STRONG_BEARISH) {
    return { 
      trend: "üî¥ –°–∏–ª—å–Ω—ã–π –Ω–∏—Å—Ö–æ–¥—è—â–∏–π —Ç—Ä–µ–Ω–¥", 
      percentage: bearishPercentage,
      state: "STRONG_BEARISH",
      profitPercent: 0
    };
  }
  if (bearishPercentage > CONFIG.TREND_THRESHOLDS.BEARISH) {
    return { 
      trend: "üî¥ –ù–∏—Å—Ö–æ–¥—è—â–∏–π —Ç—Ä–µ–Ω–¥", 
      percentage: bearishPercentage,
      state: "BEARISH",
      profitPercent: 0
    };
  }
  
  return { 
    trend: "‚ö™ –ù–µ–π—Ç—Ä–∞–ª—å–Ω—ã–π —Ç—Ä–µ–Ω–¥", 
    percentage: 50,
    state: "NEUTRAL",
    profitPercent: 0
  };
};

const calculateExitLevels = (candles, lastClose, atr, profitPercent) => {
  const entry = lastClose;
  const stopLoss = entry - atr * CONFIG.EXIT_STRATEGY.ATR_MULTIPLIER;
  const takeProfit = entry * (1 + profitPercent / 100);
  return {
    entry,
    stopLoss,
    takeProfit,
    trailingStop: entry * (1 - CONFIG.EXIT_STRATEGY.TRAILING_STOP_PERCENT / 100),
    atrValue: atr,
    profitPercent
  };
};

const createKeyboard = (symbol) => {
  // –§–æ—Ä–º–∞—Ç–∏—Ä—É–µ–º —Å–∏–º–≤–æ–ª –¥–ª—è Bybit (BTC/USDT) –∏ –¥–ª—è MEXC (BTC_USDT)
  const bybitSymbol = symbol;
  const mexcSymbol = symbol.replace('/', '_');
  
  return new InlineKeyboard()
    .url("–ü–µ—Ä–µ–π—Ç–∏ –∫ –ø–∞—Ä–µ (Bybit)", `${CONFIG.BYBIT_LINK}${bybitSymbol}`).row()
    .url("–ü–µ—Ä–µ–π—Ç–∏ –∫ –ø–∞—Ä–µ (MEXC)", `${CONFIG.MEXC_LINK}${mexcSymbol}`)
    
};

const createMessage = (symbol, trendResult, exitLevels) => {
  return `üìä <b>${symbol}</b>\n` +
    `üìà <b>–¢—Ä–µ–Ω–¥:</b> ${trendResult.trend} (${trendResult.percentage.toFixed(2)}%)\n` +
    `üéØ <b>–í—Ö–æ–¥:</b> ${exitLevels.entry.toFixed(9)}\n` +
    `üí∞ <b>–ü—Ä–æ—Ñ–∏—Ç: ${exitLevels.profitPercent}%</b>\n` +
    //`üõë <b>–°—Ç–æ–ø-–ª–æ—Å—Å:</b> ${exitLevels.stopLoss.toFixed(6)}\n` +
    `üè∑ <b>–¢—Ä–µ–π–ª–∏–Ω–≥:</b> ${exitLevels.trailingStop.toFixed(6)}`;
};

const analyzePair = async (symbol) => {
  const analysis = {};
  for (const timeframe of CONFIG.TIMEFRAMES) {
    const data = await fetchOHLCV(symbol, timeframe);
    if (!data || data.length < 50) continue;
    const closes = data.map(d => d.close);
    analysis[timeframe] = {
      lastClose: closes.slice(-1)[0],
      indicators: {
        RSI: calculateRSI(closes, CONFIG.INDICATORS.RSI.period).slice(-1)[0],
        MACD: calculateMACD(closes, CONFIG.INDICATORS.MACD.fastPeriod, CONFIG.INDICATORS.MACD.slowPeriod, CONFIG.INDICATORS.MACD.signalPeriod),
        EMA: calculateEMA(closes, CONFIG.INDICATORS.EMA.period).slice(-1)[0],
        SMA: calculateSMA(closes, CONFIG.INDICATORS.SMA.period).slice(-1)[0],
        BOLL: calculateBollingerBands(closes, CONFIG.INDICATORS.BOLL.period, CONFIG.INDICATORS.BOLL.stdDev),
        ATR: calculateATR(data, CONFIG.INDICATORS.ATR.period)
      }
    };
  }
  return analysis;
};

// –ü—Ä–æ–≤–µ—Ä–∫–∞ –∏–∑–º–µ–Ω–µ–Ω–∏—è —Å–æ—Å—Ç–æ—è–Ω–∏—è
const checkStateChange = (symbol, newState) => {
  const previousState = pairStates.get(symbol);
  
  // –ï—Å–ª–∏ —Å–æ—Å—Ç–æ—è–Ω–∏–µ –Ω–µ –∏–∑–º–µ–Ω–∏–ª–æ—Å—å
  if (previousState === newState) return false;
  
  // –ó–∞–ø–æ–º–∏–Ω–∞–µ–º –Ω–æ–≤–æ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ
  pairStates.set(symbol, newState);
  
  // –ï—Å–ª–∏ –ø—Ä–µ–¥—ã–¥—É—â–µ–≥–æ —Å–æ—Å—Ç–æ—è–Ω–∏—è –Ω–µ –±—ã–ª–æ (–ø–µ—Ä–≤—ã–π –∞–Ω–∞–ª–∏–∑)
  if (!previousState) return newState.includes("BULLISH");
  
  // –û–ø—Ä–µ–¥–µ–ª—è–µ–º –≤–∞–∂–Ω—ã–µ –ø–µ—Ä–µ—Ö–æ–¥—ã
  const importantTransitions = [
    ["BEARISH", "BULLISH"],
    ["BEARISH", "STRONG_BULLISH"],
    ["STRONG_BEARISH", "BULLISH"],
    ["STRONG_BEARISH", "STRONG_BULLISH"],
    ["NEUTRAL", "BULLISH"],
    ["NEUTRAL", "STRONG_BULLISH"]
  ];
  
  return importantTransitions.some(([prev, curr]) => 
    previousState.includes(prev) && newState.includes(curr)
  );
};

// –û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –∞–Ω–∞–ª–∏–∑–∞
const runAnalysis = async (bot) => {
  try {
   // console.log("Starting analysis...");
  //  console.log(`Analyzing ${CONFIG.TRADING_PAIRS.length} pairs:`, CONFIG.TRADING_PAIRS);
    
    for (const pair of CONFIG.TRADING_PAIRS) {
      try {
        const analysis = await analyzePair(pair);
        const trendResult = determineTrend(analysis);
        
        if (!trendResult || trendResult.profitPercent === 0) {
          pairStates.set(pair, trendResult?.state || "NEUTRAL");
          continue;
        }
        
        const shouldNotify = checkStateChange(pair, trendResult.state);
        
        if (!shouldNotify) continue;
        
        const timeframeData = analysis['1h'] || analysis[Object.keys(analysis)[0]];
        const candles = await fetchOHLCV(pair, '1h', 100);
        if (!candles) continue;
        
        const exitLevels = calculateExitLevels(
          candles, 
          timeframeData.lastClose, 
          timeframeData.indicators.ATR,
          trendResult.profitPercent
        );
        
       // console.log(`Sending signal for ${pair}: ${trendResult.trend}`);
        await bot.api.sendMessage(
          CONFIG.CHAT_ID,
          createMessage(pair, trendResult, exitLevels),
          { parse_mode: "HTML", reply_markup: createKeyboard(pair) }
        );
        await setTimeout(CONFIG.MESSAGE_DELAY);
      } catch (error) {
       // console.error(`Error analyzing pair ${pair}:`, error);
      }
    }
    
   // console.log("Analysis completed");
  } catch (error) {
   // console.error("Error in runAnalysis:", error);
  }
};

// –ö–æ–º–∞–Ω–¥—ã –¥–ª—è —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –ø–∞—Ä–∞–º–∏
const setupBotCommands = (bot) => {
  // –î–æ–±–∞–≤–ª–µ–Ω–∏–µ –ø–∞—Ä—ã –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞
  bot.command('add_pair', async (ctx) => {
    const pair = ctx.message.text.split(' ')[1];
    if (!pair) return ctx.reply("–£–∫–∞–∂–∏—Ç–µ –ø–∞—Ä—É, –Ω–∞–ø—Ä–∏–º–µ—Ä: /add_pair BTC/USDT");
    
    if (CONFIG.TRADING_PAIRS.includes(pair)) {
      return ctx.reply(`–ü–∞—Ä–∞ ${pair} —É–∂–µ –≤ —Å–ø–∏—Å–∫–µ –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞`);
    }
    
    CONFIG.TRADING_PAIRS.push(pair);
    ctx.reply(`–ü–∞—Ä–∞ ${pair} –¥–æ–±–∞–≤–ª–µ–Ω–∞ –≤ —Å–ø–∏—Å–æ–∫ –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞. –í—Å–µ–≥–æ –ø–∞—Ä: ${CONFIG.TRADING_PAIRS.length}`);
  });
  
  // –£–¥–∞–ª–µ–Ω–∏–µ –ø–∞—Ä—ã –∏–∑ –∞–Ω–∞–ª–∏–∑–∞
  bot.command('remove_pair', async (ctx) => {
    const pair = ctx.message.text.split(' ')[1];
    if (!pair) return ctx.reply("–£–∫–∞–∂–∏—Ç–µ –ø–∞—Ä—É, –Ω–∞–ø—Ä–∏–º–µ—Ä: /remove_pair BTC/USDT");
    
    const index = CONFIG.TRADING_PAIRS.indexOf(pair);
    if (index === -1) {
      return ctx.reply(`–ü–∞—Ä–∞ ${pair} –Ω–µ –Ω–∞–π–¥–µ–Ω–∞ –≤ —Å–ø–∏—Å–∫–µ –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞`);
    }
    
    CONFIG.TRADING_PAIRS.splice(index, 1);
    ctx.reply(`–ü–∞—Ä–∞ ${pair} —É–¥–∞–ª–µ–Ω–∞ –∏–∑ —Å–ø–∏—Å–∫–∞ –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞. –í—Å–µ–≥–æ –ø–∞—Ä: ${CONFIG.TRADING_PAIRS.length}`);
  });
  
  // –ü—Ä–æ—Å–º–æ—Ç—Ä –≤—Å–µ—Ö –ø–∞—Ä –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞
  bot.command('list_pairs', async (ctx) => {
    ctx.reply(`–¢–µ–∫—É—â–∏–µ –ø–∞—Ä—ã –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞ (${CONFIG.TRADING_PAIRS.length}):\n${CONFIG.TRADING_PAIRS.join('\n')}`);
  });
  
  // –ü—Ä–æ–≤–µ—Ä–∫–∞ —Å–æ—Å—Ç–æ—è–Ω–∏—è –ø–∞—Ä—ã
  bot.command('check', async (ctx) => {
    const pair = ctx.message.text.split(' ')[1];
    if (!pair) return ctx.reply("–£–∫–∞–∂–∏—Ç–µ –ø–∞—Ä—É, –Ω–∞–ø—Ä–∏–º–µ—Ä: /check BTC/USDT");
    
    const state = pairStates.get(pair) || "–Ω–µ –∞–Ω–∞–ª–∏–∑–∏—Ä–æ–≤–∞–ª–∞—Å—å";
    ctx.reply(`–¢–µ–∫—É—â–µ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ –ø–∞—Ä—ã ${pair}: ${state}`);
  });
  
  // –†—É—á–Ω–æ–π –∑–∞–ø—É—Å–∫ –∞–Ω–∞–ª–∏–∑–∞
  bot.command('analyze', async (ctx) => {
    await ctx.reply("–ó–∞–ø—É—Å–∫–∞—é –∞–Ω–∞–ª–∏–∑...");
    await runAnalysis(bot);
    await ctx.reply("–ê–Ω–∞–ª–∏–∑  –∑–∞–≤–µ—Ä—à–µ–Ω");
  });
};

// –≠–∫—Å–ø–æ—Ä—Ç –±–æ—Ç–∞ —Å –∞–≤—Ç–æ–∑–∞–ø—É—Å–∫–æ–º
module.exports = (bot) => {
  // –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –∫–æ–º–∞–Ω–¥ –±–æ—Ç–∞
  setupBotCommands(bot);
  
  // –ó–∞–ø—É—Å–∫ –∞–Ω–∞–ª–∏–∑–∞ —Å—Ä–∞–∑—É –ø—Ä–∏ —Å—Ç–∞—Ä—Ç–µ
  runAnalysis(bot).catch(console.error);
  
  // –£—Å—Ç–∞–Ω–æ–≤–∫–∞ –ø–µ—Ä–∏–æ–¥–∏—á–µ—Å–∫–æ–≥–æ –∑–∞–ø—É—Å–∫–∞
  setInterval(() => runAnalysis(bot), CONFIG.ANALYSIS_INTERVAL);
};
